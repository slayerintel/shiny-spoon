import{bi as e,bj as a,bk as t,bl as s,bm as r,bn as n,bo as o,bp as c,bq as d,br as l,bs as u}from"./lucifer.v5.js";class i extends t{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:n,urls:o}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map((e=>`    ${s(e)}`))],`  Sender: ${n}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class f extends t{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${s(a)}`,`Response: ${r(e)}`],name:"OffchainLookupResponseMalformedError"})}}class p extends t{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}const b="0x556f1830",h={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function m(t,{blockNumber:s,blockTag:r,data:l,to:u}){const{args:f}=n({data:l,abi:[h]}),[b,m,w,g,k]=f,{ccipRead:x}=t,O=x&&"function"==typeof x?.request?x.request:y;try{if(!function(t,s){if(!e(t,{strict:!1}))throw new a({address:t});if(!e(s,{strict:!1}))throw new a({address:s});return t.toLowerCase()===s.toLowerCase()}(u,b))throw new p({sender:b,to:u});const n=await O({data:w,sender:b,urls:m}),{data:l}=await o(t,{blockNumber:s,blockTag:r,data:c([g,d([{type:"bytes"},{type:"bytes"}],[n,k])]),to:u});return l}catch(L){throw new i({callbackSelector:g,cause:L,data:l,extraData:k,sender:b,urls:m})}}async function y({data:e,sender:a,urls:t}){let s=new Error("An unknown error occurred.");for(let o=0;o<t.length;o++){const c=t[o],d=c.includes("{data}")?"GET":"POST",i="POST"===d?{data:e,sender:a}:void 0,p="POST"===d?{"Content-Type":"application/json"}:{};try{const t=await fetch(c.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(i),headers:p,method:d});let n;if(n=t.headers.get("Content-Type")?.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){s=new l({body:i,details:n?.error?r(n.error):t.statusText,headers:t.headers,status:t.status,url:c});continue}if(!u(n)){s=new f({result:n,url:c});continue}return n}catch(n){s=new l({body:i,details:n.message,url:c})}}throw s}export{y as ccipRequest,m as offchainLookup,h as offchainLookupAbiItem,b as offchainLookupSignature};
